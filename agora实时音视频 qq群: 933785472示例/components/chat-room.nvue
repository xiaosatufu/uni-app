<template>
  <view class="chat-block">

    <scroll-view class="message-block"  scroll-with-animation="true">
      <view class="message-main" id="message-main">
        <block v-for="(item, index) in messageList" :key="index">
          <view class="message-box">
            <view class="avatar-box message-box-avatar-box">
              <image class="avatar avatar-box-avatar message-box-avatar" 
                    :src="item.avatarUrl ? item.avatarUrl : '/static/logo.png'" />
            </view>
            <view :class="['message-content',
                           'message-box-content',
                           (item.messageType === 'Join') ? 'room-info' : '']">

              <view v-if="item.messageType === 'Join'"
                    :class="['message', 
                             'message-box-message',
                             'message-box-message-info']">
                             <text class="message-box-content-message message-box-message-info-text">{{item.message}}</text>
              </view>
              <view v-else
                    :class="['message',
                             'message-box-message']">
                             <text class="message-box-content-message">{{item.nickName}}：{{item.message}}</text>
              </view>

            </view>
          </view>
        </block>
        <view class="message-box-space"></view>
    
      </view>
    </scroll-view>
	<view class="bottom-bar">
	  <view class="input-content bottom-bar-input-content">
		<input type="text" class="input bottom-bar-input-content-input" v-model="message" @confirm="sendMessage" confirm-type="send" placeholder="说点什么..." />
	  </view>
	  <!-- <view class="chat-tool">
		
	  </view> -->
	</view>
  </view>
</template>

<script>
	
const txRtm = uni.requireNativePlugin('TX-AgoraRTM');

export default {
  name: 'chat-room',

  data() {
    return {
      
      chatroomId: '',
      
      userInfo: {              // 我的信息
        nickName: '我的大名',
        avatarUrl: '',         // 我的头像
        userId: '9527'
      },

      message: '',            // 用户输入的，不用动
      messageList: [],        // 消息列表
      chatScrollTop: 0
    }
  },
  
  props: {
    roomId: { type: String, default() { return '' } },
  },
  
  watch: {
    roomId(val) {
      console.log('watch roomId', roomId);
      this.chatroomId = val
    }
  },
  
  created() {
    let userId = plus.device.uuid;
	txRtm.loginRtm({
		"appId":"c55f8994e73f484ba557c9c7d232b3e0",
		"rtmToken":"",
		"userId":userId
	},result=>{
		switch (result.type) {
			case 'AgoraRtmLoginSuccess':
				console.log('AgoraRtmLoginSuccess');
				txRtm.joinChannel({
					 "channelId":"1"
				},result=>{
					console.log(result);
					
					switch (result.type) {
						case 'onMessageReceivedFromMember':
							// 超过200条消息，就删除最早的1条再加入新消息
							if (this.messageList.length > 200) {
							  this.messageList.shift()
							}
							this.messageList.push({
							  nickName: this.userInfo.nickName,
							  avatarUrl: this.userInfo.avatarUrl,
							  roomNo: this.roomNo,
							  userId: this.userInfo.userId,   // send message member
							  date: new Date(),
							  message: result.msg,
							  messageType: ' ',
							  isSelf: false
							})  
					}
					
				})
				break;
		}
	})
  },
  
  mounted() {
    this.$nextTick(() => {
      
    })
  },
  
  destroyed() {
  },

  methods: {

    sendMessage(e, type, socketClient) {
      console.log('sendMessage', e);

      let message = (e.detail && e.detail.value) ? e.detail.value : e
      if (typeof message !== 'string') return console.log('message not a string', message)
      if (message && message.trim()) {
        
		txRtm.sendChannelMessage(message,result=>{
			
		});
        // websocket code can put here
        // 
    
        let messageType = type || ''
        if (message.indexOf('{') === 0 && message.lastIndexOf('}' !== 0)) {
          message = message.replace(/{|}/g, '')
          messageType = 'Join'
        }
        // 超过200条消息，就删除最早的1条再加入新消息
        if (this.messageList.length > 200) {
          this.messageList.shift()
        }
        this.messageList.push({
          nickName: this.userInfo.nickName,
          avatarUrl: this.userInfo.avatarUrl,
          roomNo: this.roomNo,
          userId: this.userInfo.userId,   // send message member
          date: new Date(),
          message: message,
          messageType: messageType,
          isSelf: true
        })
    
        // 清空输入框的内容
        // console.log('清空输入框的内容');
        this.message = ''
      } else {
        console.log('message socketClient', message, this.socketClient, socketClient);
      }
    },

    
  }

}
</script>

<style lang="scss">
@import './chat-room';

</style>
